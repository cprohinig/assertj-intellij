package com.cprohinig.assertj.generator;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ClassUsingDifferentClassesWithSameName} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractClassUsingDifferentClassesWithSameNameAssert<S extends AbstractClassUsingDifferentClassesWithSameNameAssert<S, A>, A extends ClassUsingDifferentClassesWithSameName> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractClassUsingDifferentClassesWithSameNameAssert}</code> to make assertions on actual ClassUsingDifferentClassesWithSameName.
   * @param actual the ClassUsingDifferentClassesWithSameName we want to make assertions on.
   */
  protected AbstractClassUsingDifferentClassesWithSameNameAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ClassUsingDifferentClassesWithSameName's nbaTeam is equal to the given one.
   * @param nbaTeam the given nbaTeam to compare the actual ClassUsingDifferentClassesWithSameName's nbaTeam to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ClassUsingDifferentClassesWithSameName's nbaTeam is not equal to the given one.
   */
  public S hasNbaTeam(Team nbaTeam) {
    // check that actual ClassUsingDifferentClassesWithSameName we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nbaTeam of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Team actualNbaTeam = actual.getNbaTeam();
    if (!Objects.areEqual(actualNbaTeam, nbaTeam)) {
      failWithMessage(assertjErrorMessage, actual, nbaTeam, actualNbaTeam);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ClassUsingDifferentClassesWithSameName's team is equal to the given one.
   * @param team the given team to compare the actual ClassUsingDifferentClassesWithSameName's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ClassUsingDifferentClassesWithSameName's team is not equal to the given one.
   */
  public S hasTeam(Team team) {
    // check that actual ClassUsingDifferentClassesWithSameName we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Team actualTeam = actual.getTeam();
    if (!Objects.areEqual(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
